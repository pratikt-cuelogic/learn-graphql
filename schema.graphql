enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

# Meta information about the query.
type _QueryMeta {
  count: Int!
}

type AddToMeetupMembersPayload {
  meetupsMeetup: Meetup
  membersMember: Member
}

input CreateMeetup {
  city: String!
  name: String!
  membersIds: [ID!]
  members: [MeetupmembersMember!]
}

input CreateMember {
  email: String!
  name: String!
  meetupsIds: [ID!]
  meetups: [MembermeetupsMeetup!]
}

input CreateUser {
  city: String
  dateOfBirth: DateTime
  email: String
  name: String
  password: String
  ssn: String
  state: String
}

scalar DateTime

# HelloPayload
type HelloPayload {
  message: String!
}

type Meetup implements Node {
  city: String!
  id: ID!
  members(filter: MemberFilter, orderBy: MemberOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]
  name: String!

  # Meta information about the query.
  _membersMeta(filter: MemberFilter, orderBy: MemberOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input MeetupFilter {
  # Logical AND on all given filters.
  AND: [MeetupFilter!]

  # Logical OR on all given filters.
  OR: [MeetupFilter!]
  city: String

  # All values that are not equal to given value.
  city_not: String

  # All values that are contained in given list.
  city_in: [String!]

  # All values that are not contained in given list.
  city_not_in: [String!]

  # All values less than the given value.
  city_lt: String

  # All values less than or equal the given value.
  city_lte: String

  # All values greater than the given value.
  city_gt: String

  # All values greater than or equal the given value.
  city_gte: String

  # All values containing the given string.
  city_contains: String

  # All values not containing the given string.
  city_not_contains: String

  # All values starting with the given string.
  city_starts_with: String

  # All values not starting with the given string.
  city_not_starts_with: String

  # All values ending with the given string.
  city_ends_with: String

  # All values not ending with the given string.
  city_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  members_every: MemberFilter
  members_some: MemberFilter
  members_none: MemberFilter
}

input MeetupmembersMember {
  email: String!
  name: String!
  meetupsIds: [ID!]
  meetups: [MembermeetupsMeetup!]
}

enum MeetupOrderBy {
  city_ASC
  city_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type MeetupPreviousValues {
  city: String!
  id: ID!
  name: String!
}

input MeetupSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [MeetupSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [MeetupSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: MeetupSubscriptionFilterNode
}

input MeetupSubscriptionFilterNode {
  city: String

  # All values that are not equal to given value.
  city_not: String

  # All values that are contained in given list.
  city_in: [String!]

  # All values that are not contained in given list.
  city_not_in: [String!]

  # All values less than the given value.
  city_lt: String

  # All values less than or equal the given value.
  city_lte: String

  # All values greater than the given value.
  city_gt: String

  # All values greater than or equal the given value.
  city_gte: String

  # All values containing the given string.
  city_contains: String

  # All values not containing the given string.
  city_not_contains: String

  # All values starting with the given string.
  city_starts_with: String

  # All values not starting with the given string.
  city_not_starts_with: String

  # All values ending with the given string.
  city_ends_with: String

  # All values not ending with the given string.
  city_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  members_every: MemberFilter
  members_some: MemberFilter
  members_none: MemberFilter
}

type MeetupSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Meetup
  updatedFields: [String!]
  previousValues: MeetupPreviousValues
}

type Member implements Node {
  email: String!
  id: ID!
  meetups(filter: MeetupFilter, orderBy: MeetupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Meetup!]
  name: String!

  # Meta information about the query.
  _meetupsMeta(filter: MeetupFilter, orderBy: MeetupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input MemberFilter {
  # Logical AND on all given filters.
  AND: [MemberFilter!]

  # Logical OR on all given filters.
  OR: [MemberFilter!]
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  meetups_every: MeetupFilter
  meetups_some: MeetupFilter
  meetups_none: MeetupFilter
}

input MembermeetupsMeetup {
  city: String!
  name: String!
  membersIds: [ID!]
  members: [MeetupmembersMember!]
}

enum MemberOrderBy {
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type MemberPreviousValues {
  email: String!
  id: ID!
  name: String!
}

input MemberSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [MemberSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [MemberSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: MemberSubscriptionFilterNode
}

input MemberSubscriptionFilterNode {
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  meetups_every: MeetupFilter
  meetups_some: MeetupFilter
  meetups_none: MeetupFilter
}

type MemberSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Member
  updatedFields: [String!]
  previousValues: MemberPreviousValues
}

type Mutation {
  createMeetup(city: String!, name: String!, membersIds: [ID!], members: [MeetupmembersMember!]): Meetup
  createMember(email: String!, name: String!, meetupsIds: [ID!], meetups: [MembermeetupsMeetup!]): Member
  updateMeetup(city: String, id: ID!, name: String, membersIds: [ID!], members: [MeetupmembersMember!]): Meetup
  updateMember(email: String, id: ID!, name: String, meetupsIds: [ID!], meetups: [MembermeetupsMeetup!]): Member
  updateUser(city: String, dateOfBirth: DateTime, email: String, id: ID!, name: String, password: String, ssn: String, state: String): User
  updateOrCreateMeetup(update: UpdateMeetup!, create: CreateMeetup!): Meetup
  updateOrCreateMember(update: UpdateMember!, create: CreateMember!): Member
  updateOrCreateUser(update: UpdateUser!, create: CreateUser!): User
  deleteMeetup(id: ID!): Meetup
  deleteMember(id: ID!): Member
  deleteUser(id: ID!): User
  addToMeetupMembers(membersMemberId: ID!, meetupsMeetupId: ID!): AddToMeetupMembersPayload
  removeFromMeetupMembers(membersMemberId: ID!, meetupsMeetupId: ID!): RemoveFromMeetupMembersPayload
  createUser(city: String, dateOfBirth: DateTime, email: String, name: String, password: String, ssn: String, state: String): User
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Query {
  allMeetups(filter: MeetupFilter, orderBy: MeetupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Meetup!]!
  allMembers(filter: MemberFilter, orderBy: MemberOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]!
  _allMeetupsMeta(filter: MeetupFilter, orderBy: MeetupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allMembersMeta(filter: MemberFilter, orderBy: MemberOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUsersMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  Meetup(id: ID): Meetup
  Member(email: String, id: ID): Member
  User(id: ID): User

  # hello
  hello(name: String): HelloPayload
  user: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type RemoveFromMeetupMembersPayload {
  meetupsMeetup: Meetup
  membersMember: Member
}

type Subscription {
  Meetup(filter: MeetupSubscriptionFilter): MeetupSubscriptionPayload
  Member(filter: MemberSubscriptionFilter): MemberSubscriptionPayload
  User(filter: UserSubscriptionFilter): UserSubscriptionPayload
}

input UpdateMeetup {
  city: String
  id: ID!
  name: String
  membersIds: [ID!]
  members: [MeetupmembersMember!]
}

input UpdateMember {
  email: String
  id: ID!
  name: String
  meetupsIds: [ID!]
  meetups: [MembermeetupsMeetup!]
}

input UpdateUser {
  city: String
  dateOfBirth: DateTime
  email: String
  id: ID!
  name: String
  password: String
  ssn: String
  state: String
}

type User implements Node {
  city: String
  dateOfBirth: DateTime
  email: String
  id: ID!
  name: String
  password: String
  ssn: String
  state: String
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  city: String

  # All values that are not equal to given value.
  city_not: String

  # All values that are contained in given list.
  city_in: [String!]

  # All values that are not contained in given list.
  city_not_in: [String!]

  # All values less than the given value.
  city_lt: String

  # All values less than or equal the given value.
  city_lte: String

  # All values greater than the given value.
  city_gt: String

  # All values greater than or equal the given value.
  city_gte: String

  # All values containing the given string.
  city_contains: String

  # All values not containing the given string.
  city_not_contains: String

  # All values starting with the given string.
  city_starts_with: String

  # All values not starting with the given string.
  city_not_starts_with: String

  # All values ending with the given string.
  city_ends_with: String

  # All values not ending with the given string.
  city_not_ends_with: String
  dateOfBirth: DateTime

  # All values that are not equal to given value.
  dateOfBirth_not: DateTime

  # All values that are contained in given list.
  dateOfBirth_in: [DateTime!]

  # All values that are not contained in given list.
  dateOfBirth_not_in: [DateTime!]

  # All values less than the given value.
  dateOfBirth_lt: DateTime

  # All values less than or equal the given value.
  dateOfBirth_lte: DateTime

  # All values greater than the given value.
  dateOfBirth_gt: DateTime

  # All values greater than or equal the given value.
  dateOfBirth_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  ssn: String

  # All values that are not equal to given value.
  ssn_not: String

  # All values that are contained in given list.
  ssn_in: [String!]

  # All values that are not contained in given list.
  ssn_not_in: [String!]

  # All values less than the given value.
  ssn_lt: String

  # All values less than or equal the given value.
  ssn_lte: String

  # All values greater than the given value.
  ssn_gt: String

  # All values greater than or equal the given value.
  ssn_gte: String

  # All values containing the given string.
  ssn_contains: String

  # All values not containing the given string.
  ssn_not_contains: String

  # All values starting with the given string.
  ssn_starts_with: String

  # All values not starting with the given string.
  ssn_not_starts_with: String

  # All values ending with the given string.
  ssn_ends_with: String

  # All values not ending with the given string.
  ssn_not_ends_with: String
  state: String

  # All values that are not equal to given value.
  state_not: String

  # All values that are contained in given list.
  state_in: [String!]

  # All values that are not contained in given list.
  state_not_in: [String!]

  # All values less than the given value.
  state_lt: String

  # All values less than or equal the given value.
  state_lte: String

  # All values greater than the given value.
  state_gt: String

  # All values greater than or equal the given value.
  state_gte: String

  # All values containing the given string.
  state_contains: String

  # All values not containing the given string.
  state_not_contains: String

  # All values starting with the given string.
  state_starts_with: String

  # All values not starting with the given string.
  state_not_starts_with: String

  # All values ending with the given string.
  state_ends_with: String

  # All values not ending with the given string.
  state_not_ends_with: String
}

enum UserOrderBy {
  city_ASC
  city_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  ssn_ASC
  ssn_DESC
  state_ASC
  state_DESC
}

type UserPreviousValues {
  city: String
  dateOfBirth: DateTime
  email: String
  id: ID!
  name: String
  password: String
  ssn: String
  state: String
}

input UserSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserSubscriptionFilterNode
}

input UserSubscriptionFilterNode {
  city: String

  # All values that are not equal to given value.
  city_not: String

  # All values that are contained in given list.
  city_in: [String!]

  # All values that are not contained in given list.
  city_not_in: [String!]

  # All values less than the given value.
  city_lt: String

  # All values less than or equal the given value.
  city_lte: String

  # All values greater than the given value.
  city_gt: String

  # All values greater than or equal the given value.
  city_gte: String

  # All values containing the given string.
  city_contains: String

  # All values not containing the given string.
  city_not_contains: String

  # All values starting with the given string.
  city_starts_with: String

  # All values not starting with the given string.
  city_not_starts_with: String

  # All values ending with the given string.
  city_ends_with: String

  # All values not ending with the given string.
  city_not_ends_with: String
  dateOfBirth: DateTime

  # All values that are not equal to given value.
  dateOfBirth_not: DateTime

  # All values that are contained in given list.
  dateOfBirth_in: [DateTime!]

  # All values that are not contained in given list.
  dateOfBirth_not_in: [DateTime!]

  # All values less than the given value.
  dateOfBirth_lt: DateTime

  # All values less than or equal the given value.
  dateOfBirth_lte: DateTime

  # All values greater than the given value.
  dateOfBirth_gt: DateTime

  # All values greater than or equal the given value.
  dateOfBirth_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  ssn: String

  # All values that are not equal to given value.
  ssn_not: String

  # All values that are contained in given list.
  ssn_in: [String!]

  # All values that are not contained in given list.
  ssn_not_in: [String!]

  # All values less than the given value.
  ssn_lt: String

  # All values less than or equal the given value.
  ssn_lte: String

  # All values greater than the given value.
  ssn_gt: String

  # All values greater than or equal the given value.
  ssn_gte: String

  # All values containing the given string.
  ssn_contains: String

  # All values not containing the given string.
  ssn_not_contains: String

  # All values starting with the given string.
  ssn_starts_with: String

  # All values not starting with the given string.
  ssn_not_starts_with: String

  # All values ending with the given string.
  ssn_ends_with: String

  # All values not ending with the given string.
  ssn_not_ends_with: String
  state: String

  # All values that are not equal to given value.
  state_not: String

  # All values that are contained in given list.
  state_in: [String!]

  # All values that are not contained in given list.
  state_not_in: [String!]

  # All values less than the given value.
  state_lt: String

  # All values less than or equal the given value.
  state_lte: String

  # All values greater than the given value.
  state_gt: String

  # All values greater than or equal the given value.
  state_gte: String

  # All values containing the given string.
  state_contains: String

  # All values not containing the given string.
  state_not_contains: String

  # All values starting with the given string.
  state_starts_with: String

  # All values not starting with the given string.
  state_not_starts_with: String

  # All values ending with the given string.
  state_ends_with: String

  # All values not ending with the given string.
  state_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

